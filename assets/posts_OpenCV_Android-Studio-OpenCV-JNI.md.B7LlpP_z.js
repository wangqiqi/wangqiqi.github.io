import{_ as i,c as a,o as n,a2 as h}from"./chunks/framework.BHFiY1p-.js";const t="/assets/image.C3FvZNeD.png",l="/assets/image-1.CMxs2X8x.png",e="/assets/image-2.GvJRGvjZ.png",c=JSON.parse('{"title":"Android Studio OpenCV JNI集成指南","description":"","frontmatter":{"title":"Android Studio OpenCV JNI集成指南","date":"2025-01-01T16:53:12.000Z","categories":["OpenCV","JNI","Android"],"tags":["JNI","OpenCV","环境配置"]},"headers":[],"relativePath":"posts/OpenCV/Android-Studio-OpenCV-JNI.md","filePath":"posts/OpenCV/Android-Studio-OpenCV-JNI.md","lastUpdated":1758809556000}'),k={name:"posts/OpenCV/Android-Studio-OpenCV-JNI.md"};function p(r,s,d,E,g,y){return n(),a("div",null,[...s[0]||(s[0]=[h(`<blockquote><p>最近一个项目要编译深度学习的库，需要用到 opencv 和 JNI，本文档用于记录环境配置中遇到的常见错误以及解决方案</p></blockquote><h2 id="invalid-gradle-jdk-configuration-found" tabindex="-1">Invalid Gradle JDK configuration found <a class="header-anchor" href="#invalid-gradle-jdk-configuration-found" aria-label="Permalink to &quot;Invalid Gradle JDK configuration found&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">failed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Invalid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Gradle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configuration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Invalid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Gradle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configuration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Open</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Gradle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Change</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> location</span></span></code></pre></div><p><strong>解决办法:</strong> 删除文件 <code>.idea/gradle.xml</code> 和 <code>.idea/workspace.xml</code>， 重新编译；</p><p><a href="https://blog.csdn.net/quantum7/article/details/121046377" target="_blank" rel="noreferrer">解决办法：Invalid Gradle JDK configuration found</a></p><h2 id="clang-error-unknown-argument-static-openmp" tabindex="-1">clang++: error: unknown argument: &#39;-static-openmp&#39; <a class="header-anchor" href="#clang-error-unknown-argument-static-openmp" aria-label="Permalink to &quot;clang++: error: unknown argument: &#39;-static-openmp&#39;&quot;">​</a></h2><p>原因是NDK版本过高，跟当前的AndroidStudio版本不匹配。选择升级AndroidStudio或者降低NDK版本即可。</p><p>重新下载21.3.6528147版本，配置NDK通过，rebuild项目通过，问题解决， 最新版的 Android Studio 降级到 Android Studio 4.2.1 版本，NDK 降级到 21.3.6528147;</p><p><a href="https://blog.csdn.net/Alger_magic/article/details/120200081" target="_blank" rel="noreferrer">问题：clang++.exe: error: unknown argument: ‘-static-openmp‘</a></p><p><a href="https://codeantenna.com/a/Uw7w311Dun" target="_blank" rel="noreferrer">NDK版本！clang++: error: unknown argument: ‘-static-openmp‘</a></p><h2 id="android-res-values-v26-values-v26-xml-9-5-12-13-aapt-error-resource-android-attr-colorerror-not-f" tabindex="-1">Android res\\values-v26\\values-v26.xml:9:5-12:13: AAPT: error: resource android:attr/colorError not f <a class="header-anchor" href="#android-res-values-v26-values-v26-xml-9-5-12-13-aapt-error-resource-android-attr-colorerror-not-f" aria-label="Permalink to &quot;Android res\\values-v26\\values-v26.xml:9:5-12:13: AAPT: error: resource android:attr/colorError not f&quot;">​</a></h2><p>解决方法： compileSdkVersion 设置为28</p><p><a href="https://blog.csdn.net/qq_39587209/article/details/103637356" target="_blank" rel="noreferrer">Android res\\values-v26\\values-v26.xml:9:5-12:13: AAPT: error: resource android:attr/colorError not f</a></p><h2 id="_2-files-found-with-path-lib-arm64-v8a-xxx-so-问题" tabindex="-1">2 files found with path ‘lib/arm64-v8a/xxx.so‘ 问题 <a class="header-anchor" href="#_2-files-found-with-path-lib-arm64-v8a-xxx-so-问题" aria-label="Permalink to &quot;2 files found with path ‘lib/arm64-v8a/xxx.so‘ 问题&quot;">​</a></h2><p>最后在自己的 <code>nativelib module</code> 的 <code>build.gradle</code> 的 <code>android{}</code> 加上</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            jniLibs.srcDirs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;libs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p><a href="https://blog.csdn.net/xiaobaaidaba123/article/details/122520062" target="_blank" rel="noreferrer">2 files found with path ‘lib/arm64-v8a/xxx.so‘ 问题</a></p><h2 id="undefined-reference-to-cv-string-deallocate-一种可能解决方案" tabindex="-1">undefined reference to \`cv::String::deallocate()一种可能解决方案 <a class="header-anchor" href="#undefined-reference-to-cv-string-deallocate-一种可能解决方案" aria-label="Permalink to &quot;undefined reference to \`cv::String::deallocate()一种可能解决方案&quot;">​</a></h2><p>解决方案：替换库文件时候，同步替换头文件</p><p><a href="https://blog.csdn.net/qq_21364629/article/details/122730303" target="_blank" rel="noreferrer">undefined reference to \`cv::String::deallocate()一种可能解决方案</a></p><h2 id="关于解决gradle版本与gradle插件版本不一致问题的方法之一" tabindex="-1">关于解决gradle版本与gradle插件版本不一致问题的方法之一 <a class="header-anchor" href="#关于解决gradle版本与gradle插件版本不一致问题的方法之一" aria-label="Permalink to &quot;关于解决gradle版本与gradle插件版本不一致问题的方法之一&quot;">​</a></h2><p><a href="https://blog.csdn.net/abcxyz23652/article/details/111083943" target="_blank" rel="noreferrer">关于解决gradle版本与gradle插件版本不一致问题的方法之一</a></p><h2 id="algorithm-hmacpbesha256-not-available" tabindex="-1">Algorithm HmacPBESHA256 not available <a class="header-anchor" href="#algorithm-hmacpbesha256-not-available" aria-label="Permalink to &quot;Algorithm HmacPBESHA256 not available&quot;">​</a></h2><p>在 <code>D:\\Android\\sdk\\.android</code> 的目录下找到文件 <code>debug.keystore</code>， 其实不缺少签名文件，这个问题，应该是之前安装了多个版本的 Android Studio，导致签名文件被覆盖了， 删除 <code>debug.keystore</code> 文件，重新签名即可。</p><h2 id="jni-getfieldid和getmethodid函数解释及方法签名" tabindex="-1">JNI GetFieldID和GetMethodID函数解释及方法签名 <a class="header-anchor" href="#jni-getfieldid和getmethodid函数解释及方法签名" aria-label="Permalink to &quot;JNI GetFieldID和GetMethodID函数解释及方法签名&quot;">​</a></h2><ol><li><code>GetFieldID</code> 是得到 <code>java</code> 类中的参数 <code>ID</code> ，<code>GetMethodID</code> 得到 <code>java</code> 类中方法的 <code>ID</code> ，它们只能调用类中声明为 <code>public</code> 的参数或方法。</li></ol><p>举例说明：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jclass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (*env)-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FindClass(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">env,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;com/camera/webcam/Test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jfieldID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> width_id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (*env)-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GetFieldID(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">env,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;width&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>第一个参数：JNI接口对象；第二个参数：Java类对象；第三个参数：参数名（或方法名）；第四个参数：该参数（或方法）的签名。</p><ol start="2"><li>方法签名</li></ol><p>调用 <code>JNI</code> 的 <code>GetMethodID</code> 函数获取一个 <code>jmethodID</code> 时，需要传入一个方法名称和方法签名，方法名称就是在 <code>Java</code> 中定义的方法名，方法签名的格式为：(形参参数类型列表)返回值。</p><p><a href="https://blog.csdn.net/qq_27278957/article/details/77164353" target="_blank" rel="noreferrer">JNI GetFieldID和GetMethodID函数解释及方法签名</a></p><h2 id="如何从jni返回多个数组到java" tabindex="-1">如何从JNI返回多个数组到Java？ <a class="header-anchor" href="#如何从jni返回多个数组到java" aria-label="Permalink to &quot;如何从JNI返回多个数组到Java？&quot;">​</a></h2><p>当您希望从一个函数返回多个“东西”时，您有两个选项(这并不是 <code>JNI</code> 特有的)：要么创建一个包含所有结果的包装器对象(在您的例子中，是一个包含3个数组字段的 <code>Java</code> 类)，要么使用 <code>out</code> 参数。也许，在您的情况下，如果您知道调用前的长度，后者可能会更容易一些。</p><p>所以，在 <code>Java</code> 中，您可以编写如下内容</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] array1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] array2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] array3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        fillArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array1, array2, array3);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    native</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fillArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">byteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">intArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stringArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在，在 <code>C</code> 中，这看起来是这样的：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JNIEXPORT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JNICALL </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Java_p_C_fillArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env, jobject thisC, jbyteArray byteArray, jintArray intArray, jobjectArray stringArray)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jboolean isCopy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jint i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> names[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jbyte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c_byteArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetByteArrayElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, byteArray, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isCopy);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetArrayLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, byteArray); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        c_byteArray[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (jbyte)i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReleaseByteArrayElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, byteArray, c_byteArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c_intArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetIntArrayElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, intArray, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isCopy);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetArrayLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, intArray); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        c_intArray[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReleaseIntArrayElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, intArray, c_intArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetArrayLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, stringArray) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(names)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(names[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetObjectArrayElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, stringArray, i, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewStringUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, names[i]));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://cloud.tencent.com/developer/ask/sof/112035975" target="_blank" rel="noreferrer">如何从JNI返回多个数组到Java？</a></p><h2 id="java-jni对数组赋值并返回给java" tabindex="-1">Java: JNI对数组赋值并返回给Java <a class="header-anchor" href="#java-jni对数组赋值并返回给java" aria-label="Permalink to &quot;Java: JNI对数组赋值并返回给Java&quot;">​</a></h2><p>在 <code>JNI</code> 中对 <code>Java</code> 层的数组赋值有两种方式：一是在 <code>Java</code> 层创建好数组，然后传递到 <code>JNI</code> 层，由 <code>JNI</code> 层进行赋值；二是直接在 <code>JNI</code> 层创建好数组并赋值，然后返回数组到 <code>Java</code> 层。下面是两种方式的对比实现：</p><p>创建两个 <code>native</code> 方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //传递数组,操作后,返回</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> native</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> passArrayMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] arr);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //创建指定长度数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> native</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createArrayMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len);</span></span></code></pre></div><p>生成对应的 <code>C</code> 函数</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JNIEXPORT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JNICALL Java_com_test_git_jnidemo_JniUtil_JniDemo_passArrayMethod</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, jobject, jintArray);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JNIEXPORT jintArray JNICALL Java_com_test_git_jnidemo_JniUtil_JniDemo_createArrayMethod</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, jobject, jint);</span></span></code></pre></div><p>传递数组给 <code>JNI</code> ，修改第一个元素值，然后排序</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//升序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JNIEXPORT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JNICALL Java_com_test_git_jnidemo_JniUtil_JniDemo_passArrayMethod</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env, jobject jobj, jintArray jarr){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //1.获取数组指针</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetIntArrayElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jarr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //2.获取数组长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetArrayLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jarr);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //3.排序</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    qsort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, len, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jint), com);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //4.释放资源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    env-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReleaseIntArrayElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jarr, arr, JNI_COMMIT);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    env-&gt;ReleaseIntArrayElements(jarr, arr, JNI_ABORT);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  对于最后一个参数(如果指针指向的数组为副本时，否则该参数不起作用)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //      0       copy back the content and free the elems buffer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //      JNI_COMMIT      copy back the content but do not free the elems buffer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //      JNI_ABORT       free the buffer without copying back the possible changes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><code>JNI</code> 生成数组，并返回</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JNIEXPORT jintArray JNICALL Java_com_test_git_jnidemo_JniUtil_JniDemo_createArrayMethod</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env, jobject jobj, jint len){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //1.新建长度len数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jintArray jarr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewIntArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(len);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //2.获取数组指针</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetIntArrayElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jarr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //3.赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //4.释放资源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    env-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReleaseIntArrayElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jarr, arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //5.返回数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jarr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><code>MainActivity</code> 中调用</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TAG, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arr修改前: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getArrayString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">passArrayMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TAG, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arr修改后: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getArrayString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TAG, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;------------------------------------------&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] arr_new </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createArrayMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TAG, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arr_new: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getArrayString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr_new) );</span></span></code></pre></div><p>输出结果：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">09-26</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 17:02:29.454</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 994-994/com.test.git.jnidemo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> I/MainActivity-:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arr修改前:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ,1,3,2,6,8,0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">09-26</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 17:02:29.454</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 994-994/com.test.git.jnidemo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> I/MainActivity-:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arr修改后:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ,0,2,3,6,8,100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">09-26</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 17:02:29.454</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 994-994/com.test.git.jnidemo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> I/MainActivity-:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">09-26</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 17:02:29.454</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 994-994/com.test.git.jnidemo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> I/MainActivity-:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arr_new:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ,0,1,2,3,4,5,6,7,8,9</span></span></code></pre></div><p><a href="https://www.cnblogs.com/yongdaimi/p/14023406.html" target="_blank" rel="noreferrer">Java: JNI对数组赋值并返回给Java</a></p><h2 id="jni-编程上手指南之-jnienv-详解" tabindex="-1">[JNI 编程上手指南之 JNIEnv 详解] <a class="header-anchor" href="#jni-编程上手指南之-jnienv-详解" aria-label="Permalink to &quot;[JNI 编程上手指南之 JNIEnv 详解]&quot;">​</a></h2><ol><li>JNIEnv 是什么?</li></ol><p><code>JNIEnv</code> 即 <code>Java Native Interface Environment</code>，<code>Java</code> 本地编程接口环境。<code>JNIEnv</code> 内部定义了很多函数用于简化我们的 <code>JNI</code> 编程。 <code>JNI</code> 把 <code>Java</code> 中的所有对象或者对象数组当作一个 <code>C</code> 指针传递到本地方法中，这个指针指向 <code>JVM</code> 中的内部数据结构(对象用 <code>jobject</code> 来表示，而对象数组用 <code>jobjectArray</code> 或者具体是基本类型数组)，而内部的数据结构在内存中的存储方式是不可见的。只能从 <code>JNIEnv</code> 指针指向的函数表中选择合适的 <code>JNI</code> 函数来操作 <code>JVM</code> 中的数据结构。</p><p>在 <code>C</code> 语言中，<code>JNIEnv</code> 是一个指向 <code>JNINativeInterface_</code> 结构体的指针：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JNIEnv_ JNIEnv;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JNINativeInterface_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JNIEnv;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // C 语言</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JNINativeInterface_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reserved0;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reserved1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reserved2;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reserved3;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (JNICALL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GetVersion)(JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (JNICALL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DefineClass)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name, jobject loader, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jbyte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       jsize len);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (JNICALL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NewStringUTF)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //省略其他函数指针</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>JNINativeInterface_</code> 结构体中定义了非常多的函数指针，这些函数用于简化我们的 <code>JNI</code> 编程。<code>C</code> 语言中，<code>JNIEnv</code> 中函数的使用方式如下:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// env 的实际类型是 JNINativeInterface_**</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewStringUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from JNI !&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>在 <code>C++</code> 代码中，<code>JNIEnv</code> 是一个 <code>JNIEnv_</code> 结构体：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JNIEnv_ JNIEnv;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JNINativeInterface_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JNIEnv; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JNIEnv_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JNINativeInterface_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">functions;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jint</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jclass</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefineClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jobject</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jbyte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                       jsize</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefineClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name, loader, buf, len);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jclass</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FindClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FindClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jmethodID</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FromReflectedMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jobject</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FromReflectedMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,method);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jfieldID</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FromReflectedField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jobject</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FromReflectedField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,field);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jobject</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToReflectedMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jclass</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jmethodID</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> methodID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jboolean</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> isStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToReflectedMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cls, methodID, isStatic);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jclass</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetSuperclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jclass</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetSuperclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sub);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //省略其他函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>JNIEnv_</code> 结构体中同样定义了非常多的成员函数，这些函数用于简化我们的 <code>JNI</code> 编程。<code>C++</code> <code>语言中，JNIEnv</code> 中函数的使用方式如下:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//JNIEnv * env</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// env 的实际类型是 JNIEnv_*</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewstringUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from JNI ! &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>更多详情见： <a href="https://juejin.cn/post/7243819009866956860" target="_blank" rel="noreferrer">JNI 编程上手指南之 JNIEnv 详解</a></p><h2 id="android-ndk开发-jni实战篇" tabindex="-1"><a href="https://cfanr.cn/2017/08/05/Android-NDK-dev-JNI-s-practice/" target="_blank" rel="noreferrer">Android NDK开发：JNI实战篇</a> <a class="header-anchor" href="#android-ndk开发-jni实战篇" aria-label="Permalink to &quot;[Android NDK开发：JNI实战篇](https://cfanr.cn/2017/08/05/Android-NDK-dev-JNI-s-practice/)&quot;">​</a></h2><h2 id="java调用本地方法-jni访问list集合" tabindex="-1"><a href="https://blog.csdn.net/w1992wishes/article/details/80289753" target="_blank" rel="noreferrer">java调用本地方法--JNI访问List集合</a> <a class="header-anchor" href="#java调用本地方法-jni访问list集合" aria-label="Permalink to &quot;[java调用本地方法--JNI访问List集合](https://blog.csdn.net/w1992wishes/article/details/80289753)&quot;">​</a></h2><h2 id="jni系列-四-java数据类型和jni类型对照表" tabindex="-1"><a href="https://blog.csdn.net/u011781521/article/details/106955363" target="_blank" rel="noreferrer">JNI系列(四)JAVA数据类型和JNI类型对照表</a> <a class="header-anchor" href="#jni系列-四-java数据类型和jni类型对照表" aria-label="Permalink to &quot;[JNI系列(四)JAVA数据类型和JNI类型对照表](https://blog.csdn.net/u011781521/article/details/106955363)&quot;">​</a></h2><p><img src="`+t+'" alt="符号对照表"></p><p><img src="'+l+'" alt="image-1.png"></p><p><img src="'+e+'" alt="image-2.png"></p><h2 id="【参考】" tabindex="-1">【参考】 <a class="header-anchor" href="#【参考】" aria-label="Permalink to &quot;【参考】&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/337785171" target="_blank" rel="noreferrer">Android Studio配置OpenCV的JNI接口</a></p><p><a href="https://blog.csdn.net/qq_30885821/article/details/106787323" target="_blank" rel="noreferrer">【Android+OpenCV】Android Studio的安装全过程+在Android Studio中配置OpenCV-重点关注</a></p><p><a href="https://blog.csdn.net/nishigesb123/article/details/90024821" target="_blank" rel="noreferrer">NDK开发遇到的三个错误：&#39;javah&#39; 不是内部或外部命令，编码GBK的不可映射字符， 程序包XX.XX不存在</a></p><p><a href="https://blog.csdn.net/qq_41885673/article/details/115324283" target="_blank" rel="noreferrer">OpenCV 在 Android Studio 的使用教程</a></p><p><a href="https://blog.csdn.net/Woshikunlong/article/details/121850079" target="_blank" rel="noreferrer">Android Studio使用OpenCV进行图像基本处理</a></p><p><a href="https://blog.csdn.net/gwplovekimi/article/details/106276557" target="_blank" rel="noreferrer">Android学习笔记之——基于Android的opencv开发（Android studio3.6+opencv4.3.0开发环境搭建）</a></p><p><a href="https://blog.csdn.net/quantum7/article/details/121046377" target="_blank" rel="noreferrer">解决办法：Invalid Gradle JDK configuration found</a></p><p><a href="https://codeantenna.com/a/Uw7w311Dun" target="_blank" rel="noreferrer">NDK版本！clang++: error: unknown argument: ‘-static-openmp‘</a></p><p><a href="https://blog.csdn.net/Alger_magic/article/details/120200081" target="_blank" rel="noreferrer">问题：clang++.exe: error: unknown argument: ‘-static-openmp‘</a></p><p><a href="https://blog.csdn.net/qq_39587209/article/details/103637356" target="_blank" rel="noreferrer">Android res\\values-v26\\values-v26.xml:9:5-12:13: AAPT: error: resource android:attr/colorError not f</a></p><p><a href="https://blog.csdn.net/qq_27278957/article/details/77164353" target="_blank" rel="noreferrer">JNI GetFieldID和GetMethodID函数解释及方法签名</a></p><p><a href="https://cloud.tencent.com/developer/ask/sof/112035975" target="_blank" rel="noreferrer">如何从JNI返回多个数组到Java？</a></p><p><a href="https://www.cnblogs.com/yongdaimi/p/14023406.html" target="_blank" rel="noreferrer">Java: JNI对数组赋值并返回给Java</a></p><p><a href="https://juejin.cn/post/7243819009866956860" target="_blank" rel="noreferrer">JNI 编程上手指南之 JNIEnv 详解</a></p><p><a href="https://cfanr.cn/2017/08/05/Android-NDK-dev-JNI-s-practice/" target="_blank" rel="noreferrer">Android NDK开发：JNI实战篇</a></p><p><a href="https://blog.csdn.net/w1992wishes/article/details/80289753" target="_blank" rel="noreferrer">java调用本地方法--JNI访问List集合</a></p><p><a href="https://blog.csdn.net/u011781521/article/details/106955363" target="_blank" rel="noreferrer">JNI系列(四)JAVA数据类型和JNI类型对照表</a></p>',90)])])}const F=i(k,[["render",p]]);export{c as __pageData,F as default};
