import{_ as n,c as a,o as p,ag as e}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"Git 之 .Gitignore","description":"","frontmatter":{"title":"Git 之 .Gitignore","date":"2025-01-01T00:00:00.000Z","categories":["Git"],"tags":["Git常用命令",".gitignore"]},"headers":[],"relativePath":"posts/Git/Git 之 .gitignore.md","filePath":"posts/Git/Git 之 .gitignore.md","lastUpdated":1758809068000}'),l={name:"posts/Git/Git 之 .gitignore.md"};function i(c,s,o,t,d,r){return p(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="【问题】" tabindex="-1">【问题】 <a class="header-anchor" href="#【问题】" aria-label="Permalink to &quot;【问题】&quot;">​</a></h2><p><code>Git</code>是应用极其广泛的代码版本管理工具。在编写代码的过程中会遇到很多问题，之前遇到过团队成员在提交代码仓库时，提交了大量的图片和视频文件以及一些编译的临时文件，导致代码仓库非常大，每次其他成员拉取的时候都要拉取一堆垃圾信息。那么如何避免该问题呢？</p><h2 id="【解决办法】" tabindex="-1">【解决办法】 <a class="header-anchor" href="#【解决办法】" aria-label="Permalink to &quot;【解决办法】&quot;">​</a></h2><p>在新建仓库的时候，建立一个 <code>.gitignore</code> 文件，该文件可以忽略掉那些临时文件，或者不需要跟踪的文件，也可以忽略掉一些文件夹。那么 <code>.gitignore</code> 的规则如何呢？</p><ol><li><code>.gitignore</code> 文件的存放 该文件可以存放在仓库的根目录下，它递归应用于整个仓库中。也可以放在子目录中，子目录中的 <code>.gitignore</code> 作用域在其目录。</li><li><code>.gitignore</code> 格式规范</li></ol><ul><li>所有空行或者以 <code># </code> 开头的行都会被 <code>Git</code> 忽略；</li><li>可以使用标准的 glob 模式匹配，它会递归应用到整个工作区；</li><li>匹配模式可以以 <code>/</code> 开头防止递归；</li><li>匹配模式可以以 <code>/</code> 结尾指定目录；</li><li>要忽略那些指定格式的文件或目录，可以在模式前加上 <code>!</code> 取反，即该类文件或目录继续进行跟踪。</li></ul><blockquote><p><code>glob</code> 模式是指 <code>shell</code> 简化了正则表达式。<code>*</code> 匹配0个或多个任意字符，<code>[abc]</code> 匹配任意一个列在方括号中的字符（要么匹配 <code>a</code>, 要么匹配 <code>b</code>, 要么匹配 <code>c</code> ）。<code>?</code> 只匹配一个任意字符。如果方括号中使用了短划线分割两个字符，如 <code>[0-9]</code> 会匹配 <code>0~9</code> 之间的数字；使用 <code>**</code> 表示匹配任意中间目录，如 <code>a/**/z</code> 表示匹配 <code>a/z</code>, <code>a/b/z</code>, <code>a/b/c/d/e/z</code>；</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 忽略所有的 .a 文件</span></span>
<span class="line"><span>*.a</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span></span>
<span class="line"><span>!lib.a</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span>
<span class="line"><span>/TODO</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 忽略任何目录下名为 build 的文件夹</span></span>
<span class="line"><span>build/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span>
<span class="line"><span>doc/*.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span>
<span class="line"><span>doc/**/*.pdf</span></span></code></pre></div><ol start="3"><li>要养成一个好的习惯 每次建立新仓库的时候，应及时建立 <code>.gitignore</code> 文件，以免将来提交无用的文件。</li></ol><blockquote><p><code>Git </code> 除了利用 <code>.gitignore</code> 方式忽略不需要跟踪的文件外。还提供了另外一种方式 <code>exclude</code>, <code>exclude</code> 存放在 <code>.git/info/exclude </code> ， 它与 <code>.gitignore</code> 不同的是， <code>exclude</code> 是本地需要排除的文件，不会提交到仓库中应用在别人机器上，而 <code>.gitignore</code> 本身可以提交到仓库中，适用于使用仓库的所有人。</p></blockquote><blockquote><p><code>.gitignore</code> 文件可以作为占位文件，例如有些文件夹需要同步到仓库中，可以在文件夹中新建一个 <code>.gitignore </code>文件，下次拉取的时候可以同步拉取了这个空目录。</p></blockquote><ol start="4"><li>如果已经提交了大文件到仓库中， 怎么办？ <strong>思考中，下集再见</strong></li></ol><h2 id="【示例】" tabindex="-1">【示例】 <a class="header-anchor" href="#【示例】" aria-label="Permalink to &quot;【示例】&quot;">​</a></h2><p><a href="https://github.com/github/gitignore" target="_blank" rel="noreferrer"><code>.gitignore</code> 模板文件</a></p><p><code>c++/cuda</code> 项目下的 <code>.gitignore</code> 文件模板</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Prerequisites</span></span>
<span class="line"><span>*.d</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Compiled Object files</span></span>
<span class="line"><span>*.slo</span></span>
<span class="line"><span>*.lo</span></span>
<span class="line"><span>*.o</span></span>
<span class="line"><span>*.obj</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Precompiled Headers</span></span>
<span class="line"><span>*.gch</span></span>
<span class="line"><span>*.pch</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Compiled Dynamic libraries</span></span>
<span class="line"><span>*.so</span></span>
<span class="line"><span>*.dylib</span></span>
<span class="line"><span>*.dll</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Fortran module files</span></span>
<span class="line"><span>*.mod</span></span>
<span class="line"><span>*.smod</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Compiled Static libraries</span></span>
<span class="line"><span>*.lai</span></span>
<span class="line"><span>*.la</span></span>
<span class="line"><span>*.a</span></span>
<span class="line"><span>*.lib</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Executables</span></span>
<span class="line"><span>*.exe</span></span>
<span class="line"><span>*.out</span></span>
<span class="line"><span>*.app</span></span>
<span class="line"><span></span></span>
<span class="line"><span># cuda</span></span>
<span class="line"><span>*.i</span></span>
<span class="line"><span>*.ii</span></span>
<span class="line"><span>*.gpu</span></span>
<span class="line"><span>*.ptx</span></span>
<span class="line"><span>*.cubin</span></span>
<span class="line"><span>*.fatbin</span></span></code></pre></div><p><code>c </code>项目下的 <code>.gitignore</code> 文件模板</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Prerequisites</span></span>
<span class="line"><span>*.d</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Object files</span></span>
<span class="line"><span>*.o</span></span>
<span class="line"><span>*.ko</span></span>
<span class="line"><span>*.obj</span></span>
<span class="line"><span>*.elf</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Linker output</span></span>
<span class="line"><span>*.ilk</span></span>
<span class="line"><span>*.map</span></span>
<span class="line"><span>*.exp</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Precompiled Headers</span></span>
<span class="line"><span>*.gch</span></span>
<span class="line"><span>*.pch</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Libraries</span></span>
<span class="line"><span>*.lib</span></span>
<span class="line"><span>*.a</span></span>
<span class="line"><span>*.la</span></span>
<span class="line"><span>*.lo</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Shared objects (inc. Windows DLLs)</span></span>
<span class="line"><span>*.dll</span></span>
<span class="line"><span>*.so</span></span>
<span class="line"><span>*.so.*</span></span>
<span class="line"><span>*.dylib</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Executables</span></span>
<span class="line"><span>*.exe</span></span>
<span class="line"><span>*.out</span></span>
<span class="line"><span>*.app</span></span>
<span class="line"><span>*.i*86</span></span>
<span class="line"><span>*.x86_64</span></span>
<span class="line"><span>*.hex</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Debug files</span></span>
<span class="line"><span>*.dSYM/</span></span>
<span class="line"><span>*.su</span></span>
<span class="line"><span>*.idb</span></span>
<span class="line"><span>*.pdb</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Kernel Module Compile Results</span></span>
<span class="line"><span>*.mod*</span></span>
<span class="line"><span>*.cmd</span></span>
<span class="line"><span>.tmp_versions/</span></span>
<span class="line"><span>modules.order</span></span>
<span class="line"><span>Module.symvers</span></span>
<span class="line"><span>Mkfile.old</span></span>
<span class="line"><span>dkms.conf</span></span></code></pre></div><p><code>Python </code>项目下的 <code>.gitignore</code> 文件模板</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Byte-compiled / optimized / DLL files</span></span>
<span class="line"><span>__pycache__/</span></span>
<span class="line"><span>*.py[cod]</span></span>
<span class="line"><span>*$py.class</span></span>
<span class="line"><span></span></span>
<span class="line"><span># C extensions</span></span>
<span class="line"><span>*.so</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Distribution / packaging</span></span>
<span class="line"><span>.Python</span></span>
<span class="line"><span>build/</span></span>
<span class="line"><span>develop-eggs/</span></span>
<span class="line"><span>dist/</span></span>
<span class="line"><span>downloads/</span></span>
<span class="line"><span>eggs/</span></span>
<span class="line"><span>.eggs/</span></span>
<span class="line"><span>lib/</span></span>
<span class="line"><span>lib64/</span></span>
<span class="line"><span>parts/</span></span>
<span class="line"><span>sdist/</span></span>
<span class="line"><span>var/</span></span>
<span class="line"><span>wheels/</span></span>
<span class="line"><span>share/python-wheels/</span></span>
<span class="line"><span>*.egg-info/</span></span>
<span class="line"><span>.installed.cfg</span></span>
<span class="line"><span>*.egg</span></span>
<span class="line"><span>MANIFEST</span></span>
<span class="line"><span></span></span>
<span class="line"><span># PyInstaller</span></span>
<span class="line"><span>#  Usually these files are written by a python script from a template</span></span>
<span class="line"><span>#  before PyInstaller builds the exe, so as to inject date/other infos into it.</span></span>
<span class="line"><span>*.manifest</span></span>
<span class="line"><span>*.spec</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Installer logs</span></span>
<span class="line"><span>pip-log.txt</span></span>
<span class="line"><span>pip-delete-this-directory.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Unit test / coverage reports</span></span>
<span class="line"><span>htmlcov/</span></span>
<span class="line"><span>.tox/</span></span>
<span class="line"><span>.nox/</span></span>
<span class="line"><span>.coverage</span></span>
<span class="line"><span>.coverage.*</span></span>
<span class="line"><span>.cache</span></span>
<span class="line"><span>nosetests.xml</span></span>
<span class="line"><span>coverage.xml</span></span>
<span class="line"><span>*.cover</span></span>
<span class="line"><span>*.py,cover</span></span>
<span class="line"><span>.hypothesis/</span></span>
<span class="line"><span>.pytest_cache/</span></span>
<span class="line"><span>cover/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Translations</span></span>
<span class="line"><span>*.mo</span></span>
<span class="line"><span>*.pot</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Django stuff:</span></span>
<span class="line"><span>*.log</span></span>
<span class="line"><span>local_settings.py</span></span>
<span class="line"><span>db.sqlite3</span></span>
<span class="line"><span>db.sqlite3-journal</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Flask stuff:</span></span>
<span class="line"><span>instance/</span></span>
<span class="line"><span>.webassets-cache</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Scrapy stuff:</span></span>
<span class="line"><span>.scrapy</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Sphinx documentation</span></span>
<span class="line"><span>docs/_build/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># PyBuilder</span></span>
<span class="line"><span>.pybuilder/</span></span>
<span class="line"><span>target/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Jupyter Notebook</span></span>
<span class="line"><span>.ipynb_checkpoints</span></span>
<span class="line"><span></span></span>
<span class="line"><span># IPython</span></span>
<span class="line"><span>profile_default/</span></span>
<span class="line"><span>ipython_config.py</span></span>
<span class="line"><span></span></span>
<span class="line"><span># pyenv</span></span>
<span class="line"><span>#   For a library or package, you might want to ignore these files since the code is</span></span>
<span class="line"><span>#   intended to run in multiple environments; otherwise, check them in:</span></span>
<span class="line"><span># .python-version</span></span>
<span class="line"><span></span></span>
<span class="line"><span># pipenv</span></span>
<span class="line"><span>#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.</span></span>
<span class="line"><span>#   However, in case of collaboration, if having platform-specific dependencies or dependencies</span></span>
<span class="line"><span>#   having no cross-platform support, pipenv may install dependencies that don&#39;t work, or not</span></span>
<span class="line"><span>#   install all needed dependencies.</span></span>
<span class="line"><span>#Pipfile.lock</span></span>
<span class="line"><span></span></span>
<span class="line"><span># poetry</span></span>
<span class="line"><span>#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.</span></span>
<span class="line"><span>#   This is especially recommended for binary packages to ensure reproducibility, and is more</span></span>
<span class="line"><span>#   commonly ignored for libraries.</span></span>
<span class="line"><span>#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control</span></span>
<span class="line"><span>#poetry.lock</span></span>
<span class="line"><span></span></span>
<span class="line"><span># pdm</span></span>
<span class="line"><span>#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.</span></span>
<span class="line"><span>#pdm.lock</span></span>
<span class="line"><span>#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it</span></span>
<span class="line"><span>#   in version control.</span></span>
<span class="line"><span>#   https://pdm.fming.dev/#use-with-ide</span></span>
<span class="line"><span>.pdm.toml</span></span>
<span class="line"><span></span></span>
<span class="line"><span># PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm</span></span>
<span class="line"><span>__pypackages__/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Celery stuff</span></span>
<span class="line"><span>celerybeat-schedule</span></span>
<span class="line"><span>celerybeat.pid</span></span>
<span class="line"><span></span></span>
<span class="line"><span># SageMath parsed files</span></span>
<span class="line"><span>*.sage.py</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Environments</span></span>
<span class="line"><span>.env</span></span>
<span class="line"><span>.venv</span></span>
<span class="line"><span>env/</span></span>
<span class="line"><span>venv/</span></span>
<span class="line"><span>ENV/</span></span>
<span class="line"><span>env.bak/</span></span>
<span class="line"><span>venv.bak/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Spyder project settings</span></span>
<span class="line"><span>.spyderproject</span></span>
<span class="line"><span>.spyproject</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Rope project settings</span></span>
<span class="line"><span>.ropeproject</span></span>
<span class="line"><span></span></span>
<span class="line"><span># mkdocs documentation</span></span>
<span class="line"><span>/site</span></span>
<span class="line"><span></span></span>
<span class="line"><span># mypy</span></span>
<span class="line"><span>.mypy_cache/</span></span>
<span class="line"><span>.dmypy.json</span></span>
<span class="line"><span>dmypy.json</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Pyre type checker</span></span>
<span class="line"><span>.pyre/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># pytype static type analyzer</span></span>
<span class="line"><span>.pytype/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Cython debug symbols</span></span>
<span class="line"><span>cython_debug/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># PyCharm</span></span>
<span class="line"><span>#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can</span></span>
<span class="line"><span>#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore</span></span>
<span class="line"><span>#  and can be added to the global gitignore or merged into this file.  For a more nuclear</span></span>
<span class="line"><span>#  option (not recommended) you can uncomment the following to ignore the entire idea folder.</span></span>
<span class="line"><span>#.idea/</span></span></code></pre></div><h2 id="【参考】" tabindex="-1">【参考】 <a class="header-anchor" href="#【参考】" aria-label="Permalink to &quot;【参考】&quot;">​</a></h2><ol><li><a href="https://www.cnblogs.com/pylemon/archive/2012/07/16/2593112.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/pylemon/archive/2012/07/16/2593112.html</a></li><li><a href="https://github.com/github/gitignore" target="_blank" rel="noreferrer">https://github.com/github/gitignore</a></li><li><a href="https://blog.csdn.net/ThinkWon/article/details/101447866" target="_blank" rel="noreferrer">https://blog.csdn.net/ThinkWon/article/details/101447866</a></li></ol>`,22)])])}const b=n(l,[["render",i]]);export{h as __pageData,b as default};
