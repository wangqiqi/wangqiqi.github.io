import{_ as i,c as o,o as p,ag as t}from"./chunks/framework.B-XtCDNB.js";const g=JSON.parse('{"title":"Git 15分钟快速掌握","description":"","frontmatter":{"title":"Git 15分钟快速掌握","date":"2025-01-01T00:00:00.000Z","categories":["Git"],"tags":["Git常用命令"]},"headers":[],"relativePath":"posts/Git/Git 15分钟快速掌握.md","filePath":"posts/Git/Git 15分钟快速掌握.md"}'),c={name:"posts/Git/Git 15分钟快速掌握.md"};function a(l,e,d,r,n,h){return p(),o("div",null,[...e[0]||(e[0]=[t('<h1 id="git常用命令" tabindex="-1">GIT常用命令 <a class="header-anchor" href="#git常用命令" aria-label="Permalink to &quot;GIT常用命令&quot;">​</a></h1><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><ol><li><p>配置操作人员名称</p><p><code>git config --global user.name &quot;xxx&quot;</code></p></li><li><p>配置操作人员邮箱</p><p><code>git config --global user.email &quot;xxx@example.com&quot;</code></p></li><li><p>配置信息显示方式</p><p><code>git config --global color.ui true</code></p></li></ol><h2 id="本地操作" tabindex="-1">本地操作 <a class="header-anchor" href="#本地操作" aria-label="Permalink to &quot;本地操作&quot;">​</a></h2><ol><li><p>初始化git仓库</p><p><code>git init . # 在当前目录下创建一个.git文件夹，以后所有的操作都会被记录在里面</code></p></li><li><p>添加更改到索引库</p><p><code>git add .</code></p></li><li><p>将索引信息提交到仓库</p><p><code>git commit -m &quot;the first time commit here&quot;</code></p></li><li><p>查看最近一次的更改日志</p><p><code>git log -l # 如果想着最近3次，可以改成3</code></p></li><li><p>将分支branch1合并到当前分支上，如果冲突，就会提示，按照提示修改即可</p><p><code>git merge branch1</code></p></li><li><p>建立新的分支 newbranch</p><p><code>git branch newbranch</code></p></li><li><p>列出所有分支</p><p><code>git branch</code></p></li><li><p>签出分支newbranch</p><p><code>git checkout newbranch</code></p></li><li><p>创建并签出分支branch0</p><p><code>git checkout -b branch0</code></p></li><li><p>临时保存当前工作</p><p><code>git stash</code></p></li><li><p>列出所有临时保存的工作</p><p><code>git stash list</code></p></li><li><p>恢复某一个临时工作</p><p><code>git stash pop stash@{2}</code></p></li><li><p>创建里程碑1.0.0</p><p><code>git tag 1.0.0</code></p></li><li><p>将里程碑1.0.0相关的文件打包起来发布</p><p><code>git archive --format=zip 1.0.0 &gt; code1.0.0.zip</code></p></li><li><p>返回历史的操作reset</p><p><code>git reset HEAD^ # 返回到前一次没有add的状态</code><code>git reset --soft HEAD^ # 返回前一次没有commit的状态</code><code>git reset --hard HEAD^ # 返回前一个状态，工作区的修改也会被同时撤销</code><code>HEAD^ # 前一次提交</code><code>HEAD^^ # 前两次提交</code><code>HEAD^^^ # 前三次提交</code><code>SHA1_HASH #每次提交都对应着一个唯一的 SHA1_HASH 值。一般情况下只需输入前 5 项即 可 注：如果你担心 reset 后会后悔，那么在 reset 前记录一下最新一次提交的 SHA1_HASH 值。</code></p></li><li><p>回到历史中某个时候并新增一条分支newbranch</p><p><code>git checkout SHA1_HASH &amp;&amp; git branch newbranch</code></p></li></ol><h2 id="远程操作" tabindex="-1">远程操作 <a class="header-anchor" href="#远程操作" aria-label="Permalink to &quot;远程操作&quot;">​</a></h2><ol><li><p>建立空远程仓库</p><p><code>git init --bare</code></p></li><li><p>将远程仓库地址用origin来命名</p><p><code>git remote add origin coder@192.168.0.222:xxxx</code></p></li><li><p>拷贝一份远程仓库</p><p><code>git clone origin</code></p></li><li><p>在本地创建一个分支branch1，并将远程库中的master分支拷贝到本地的branch1分支上</p><p><code>git fetch origin master:branch1</code></p></li><li><p>将远程库中的master分支拷贝到本地的branch2分支上并进行合并，如果冲突则解决</p><p><code>git pull origin master:branch2</code></p></li><li><p>将本地的branch3分支推送到远程库中的branch4分支中</p><p><code>git push origin branch3:branch4</code></p></li><li><p>删除远程库的branch4分支</p><p><code>git push origin :branch4</code></p></li><li><p>将本地的branch5分支推送到远程库中</p><p><code>git push origin branch5</code></p></li><li><p>将本地所有分支推送到远程库中</p><p><code>git push origin --all</code></p></li></ol>',7)])])}const b=i(c,[["render",a]]);export{g as __pageData,b as default};
